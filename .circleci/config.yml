version: 2.1
orbs:
  gh: circleci/github-cli@2.3.0
  aws-cli: circleci/aws-cli@4.1.3
parameters:
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""
  environment:
    type: string
    default: "test"
  image_tag:
    description: Image tag to be deployed
    type: string
    default: ""
  deploy_pipeline:
    description: Flag to control deployment workflow via API
    type: boolean
    default: false
  ansible-branch:
    description: Ansible branch to use for configs
    type: string
    default: "master"
  release_build_trigger:
    description: Flag for release build pipeline.trigger_source
    type: boolean
    default: false
jobs:
  build:
    parameters:
      target_branch:
        type: string
        default: "^(master)"
    machine:
      image: default
    resource_class: medium
    shell: /bin/bash --login
    working_directory: ~/trino-hive/
    environment:
      GITHUB_TOKEN: GH_TOKEN
    steps:
      - checkout:
          path: ~/trino-hive
      - gh/setup
      - add_ssh_keys:
          fingerprints:
            - "SHA256:721iHdvInx4iFO+tnXsFTec7AJQqwrm+jd+S9EF8dBs"
      - run:
          name: Add public key to .ssh directory.
          command: echo ${GITHUB_ECDSA_PUBLIC} > ~/.ssh/id_rsa_848d8303cbe1bc703d9772fc10270a3e.pub
      - aws-cli/setup
      - run:
          name: Docker pre-build
          command: ./.deployment/docker-prebuild.sh
      - run:
          name: build trino image
          command: ./.deployment/build-service-image-loader-snowflake.sh
      - persist_to_workspace:
          root: .
          paths:
            - env_vars

  deploy:
    parameters:
      ansible-service-branch:
        description: Branch to use for ansible service based on the environment.
        default: "dev"
        type: string
    docker:
      - image: cimg/python:3.10
    resource_class: medium
    working_directory: ~/trino-hive/
    steps:
      - checkout:
          path: ~/trino-hive/
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - "84:8d:83:03:cb:e1:bc:70:3d:97:72:fc:10:27:0a:3e"
      - run:
          name: Add public key to .ssh directory.
          command: echo ${GITHUB_ECDSA_PUBLIC} > ~/.ssh/id_rsa_848d8303cbe1bc703d9772fc10270a3e.pub
      - aws-cli/setup:
          profile_name: default
      - aws-cli/role_arn_setup:
          profile_name: << pipeline.parameters.environment >>
          role_arn: ${AWS_ASSUME_ROLE_ARN}
          source_profile: default
      - run:
          name: Clone ansible-service repository
          command: |
            cd ../
            git clone git@github.com:hevoio/ansible-service.git --branch << parameters.ansible-service-branch >>
      - run:
          name: Setup the environment for ansible-service
          command: |
            cd .deployment
            ./ansible-setup.sh
      - run:
          name: Generate the hive config file and push to cloud.
          command: |
            cd ../ansible-service
            ansible-playbook -i environments/<< pipeline.parameters.environment >> trino-hive-config.yml
      - run:
          name: Install jinja cli
          command: pip3 install jinja-cli
      - run:
          name: Render task definition json using jinja for trino service
          command: |
            if [[ -z '<< pipeline.parameters.image_tag >>' ]]; then
              source env_vars
              echo ${image_tag}
            else
              image_tag=<< pipeline.parameters.image_tag >>
            fi
            export ENVIRONMENT=<< pipeline.parameters.environment >>
            export CONTAINER_IMAGE="475116478827.dkr.ecr.${AWS_REGION}.amazonaws.com/trino-service:${image_tag}"
            export MODULE="trino-service"
            export TRINO_HIVE_CONFIG_PATH="${TRINO_HIVE_CONFIG_PATH}"
            jinja -E INFLUX_URL -E ENVIRONMENT -E ECS_TASK_ROLE_ARN -E ECS_EXECUTION_ROLE_ARN -E CONTAINER_IMAGE -E MODULE -E AWS_REGION -E CIRCLE_SHA1 -E TRINO_HIVE_CONFIG_PATH -E CORALOGIX_API_KEY .deployment/task-definition.json.j2 -o .deployment/task-definition-trino.json
      - run:
          name: Create Task Definition for trino service
          command: |
            aws ecs register-task-definition \
            --cli-input-json file://.deployment/task-definition-trino.json \
            --profile=<< pipeline.parameters.environment >> \
            --region=${AWS_REGION}     


workflows:
  loader:
    when:
      and:
        - not: << pipeline.parameters.deploy_pipeline >>
        - or:
            - equal: [ "webhook", << pipeline.trigger_source >> ]
            - equal: [ "api", << pipeline.trigger_source >> ]
    jobs:
      - build:
          name: Build trino
          target_branch: "^(master)"
          context:
            - org-global
            - env-test
      - gamma-deployment-approval:
          type: approval
          requires:
            - Build trino
          filters:
            branches:
              only:
                - dev
                - /^release\/.*/
      - deploy:
          name: Gamma Deployment
          requires:
            - gamma-deployment-approval
          context:
            - org-global
            - env-gamma
          filters:
            branches:
              only:
                - dev
                - /^release\/.*/
  Perform Branch cut:
    jobs:
      - approve-branch-cut:
          type: approval
          context:
            - env-us3
          filters:
            branches:
              only: dev
      - perform-branch-cut:
          requires:
            - approve-branch-cut
          context:
            - org-global
            - env-us3
          filters:
            branches:
              only: dev

  Release artifact:
    when:
      and:
        - equal: [ "api", << pipeline.trigger_source >> ]
        - << pipeline.parameters.release_build_trigger >>
    jobs:
      - build:
          name: Build release candidate
          context:
            - org-global
            - env-us3
          filters:
            branches:
              only: /^release\/.*/

  Deploy-Workflow:
    when:
      and:
        - equal: [ "api", << pipeline.trigger_source >> ]
        - << pipeline.parameters.deploy_pipeline >>
    jobs:
      - deploy:
          name: << pipeline.parameters.environment >> Deployment s3-connector service
          context:
            - org-global
            - env-<< pipeline.parameters.environment >>
          ansible-service-branch: << pipeline.parameters.ansible-branch >>

  Perform Debug Release Branch Cut:
    jobs:
      - approve-debug-release:
          type: approval
          context:
            - env-us3
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/

      - perform-debug-branch-cut:
          requires:
            - approve-debug-release
          context:
            - org-global
            - env-us3
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/

  Perform Hotfix Branch Cut:
    jobs:
      - approve-hotfix-release:
          type: approval
          context:
            - env-us3
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/

      - perform-hotfix-branch-cut:
          requires:
            - approve-hotfix-release
          context:
            - org-global
            - env-us3
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/